name:                loops
version:             0.3.0.0
synopsis:            Fast imperative-style loops
description:
  @loops@ is a library for fast, imperative-style loops with a clean syntax.
  .
  Features
  .
  * Fast, imperative-style loops with a clean syntax. Bind (`>>=`) nests loops,
    so in `do`-notation, each subsequent line is nested inside loops that appear
    above it.
  .
  * Iteration over common data structures, like lists and vectors.
  .
  * Robust performance because there is no reliance on fusion.
  .
  * Loop-unrolling to arbitrary depth. Unrollable loop combinators are
    provided in `Control.Monad.Loop.Unroll`. (The simple, "rolled" interface is
    still provided in `Control.Monad.Loop`.) The unrolling depth is set at the
    call site at compile time. My benchmarks show that folding over unrolled
    loops is up to 25% faster than folding over unboxed vectors!
  .
  * NEW! Arbitrary, named continuations (breakpoints). `breaking` and
    `breaking_` each create a continuation at the current point and pass that
    continuation to a subloop. The named continuation is existentially quantified
    to prevent it from escaping its scope. Only one continuation/breakpoint can be
    active at a time.  `unbreakable` masks continuations, preventing any external
    breakpoints from being invoked in a subloop.
  .
  For best performance, please compile your code with @-O2@. You should also
  use GHC's LLVM backend if possible; it generally produces faster executables.
license:             BSD3
license-file:        LICENSE
author:              Thomas Tuegel
maintainer:          ttuegel@gmail.com
bug-reports:         https://github.com/ttuegel/loops/issues
copyright:           (c) Thomas Tuegel 2014
category:            Control
build-type:          Simple
extra-source-files:  README.md, README.lhs
cabal-version:       >=1.10
tested-with:         GHC == 7.6.3, GHC == 7.8.4, GHC == 7.10.1

source-repository head
  type: git
  location: https://github.com/ttuegel/loops.git

library
  exposed-modules:
    Control.Monad.Loop
  build-depends:
      base >=4.6 && <5
    , ghc-prim >= 0.4
  ghc-options: -Wall
  hs-source-dirs: src
  default-language: Haskell2010

test-suite test
  type: exitcode-stdio-1.0
  hs-source-dirs: bench
  main-is: Bench.hs
  build-depends:
      base >= 4.6 && < 5
    , criterion
    , loops
    , vector
  ghc-options: -Wall
  default-language: Haskell2010

benchmark bench
  type: exitcode-stdio-1.0
  hs-source-dirs: bench
  main-is: Bench.hs
  build-depends:
      base >= 4.6 && < 5
    , criterion >= 1.1 && < 1.2
    , loops
    , vector
  ghc-options: -Wall
  default-language: Haskell2010
